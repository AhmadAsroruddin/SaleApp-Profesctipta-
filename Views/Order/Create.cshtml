@using SaleApp.ViewModels
@{
    ViewData["Title"] = "Create Sales Order";
    Layout = "_Layout";
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

@model CreateOrderVM


<form asp-action="SaveOrder" method="post" id="orderForm">

    <div class="p-2 mt-2 container-fluid d-flex justify-content-center align-items-center" style="height: auto; background-color: rgba(0, 42, 92, 1);">
        <h2 class="text-white fs-4">Sale Order Information <i class="fa-solid fa-angles-down fa-sm"></i> </h2>
    </div>

    <div class="row justify-content-around mt-4">
        <div class="col-md-4">
            <div class="mb-3 d-flex align-items-center">
                <label for="orderNumber" class="form-label text-nowrap me-3" style="min-width: 150px;">Sales Order Number*</label>
                <div class="flex-grow-1">
                    <input type="text" class="border-1 form-control border-dark w-100" id="orderNumber" asp-for="Form.ORDER_NO" placeholder="" style="border-radius: 10px;"/>
                    <span asp-validation-for="Form.ORDER_NO" class="text-danger"></span>

                </div>
            </div>
            <div class="mb-3 d-flex align-items-center">
                <label for="orderDate" class="form-label text-nowrap me-3" style="min-width: 150px;">Order Date</label>
                <div class="flex-grow-1">
                    <input type="date" class="border-1 form-control border-dark w-100" id="orderDate"  asp-for="Form.ORDER_DATE" placeholder="" style="border-radius: 10px;"/>
                    <span asp-validation-for="Form.ORDER_DATE" class="text-danger"></span>

                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="mb-3 d-flex align-items-center">
                <label for="customer" class="form-label me-3 text-nowrap" style="min-width: 150px;">Customer</label>
                <select class="form-select" aria-label="Default select example" asp-for="Form.COM_CUSTOMER_ID">
                    <option>Open this select menu</option>
                    @foreach (var customer in Model.Customers)
                    {
                        <option value="@customer.COM_CUSTOMER_ID">@customer.CUSTOMER_NAME</option>
                    }
                </select>
                <span asp-validation-for="Form.COM_CUSTOMER_ID" class="text-danger"></span>

            </div>
            <div class="mb-3 d-flex align-items-center">
                <label for="address" class="form-label me-3 text-nowrap" style="min-width: 150px;">Address</label>

                <div class="flex-grow-1">
                    <textarea class="form-control border-dark" id="address"  rows="4" placeholder="Enter your address" style="border-radius: 10px;" asp-for="Form.ADDRESS"></textarea>
                    <span asp-validation-for="Form.ADDRESS" class="text-danger"></span>
                </div>

            </div>
        </div>
    </div>

    <div class="p-2 mt-2 container-fluid d-flex justify-content-center align-items-center" style="height: auto; background-color: rgba(0, 42, 92, 1);">
        <h2 class="text-white fs-4">Detail Item Information <i class="fa-solid fa-angles-down fa-sm"></i> </h2>
    </div>

    <div class="row w-max justify-content-between p-4">
        <div class="col-md-7">
            <a onclick="addItemRow()" class="btn btn-red text-light">Add Item</a>
        </div>
        <div class="col-md-4 text-end">

        </div>
    </div>

    <div class="row bg-white" style="margin-left: 2rem; margin-right: 2rem; margin-bottom: 2rem;">
        <table class="table table-striped w-max" id="itemsTable">
            <thead>
                <tr class="text-light" style="background-color: rgba(0, 42, 92, 1);">
                    <th scope="col">No</th>
                    <th scope="col">Action</th>
                    <th scope="col">Item Name</th>
                    <th scope="col">QTY</th>
                    <th scope="col">Price</th>
                    <th scope="col">Total</th>
                </tr>
            </thead>
            <tbody class="table-group-divider" id="itemsTableBody">
                
            </tbody>
            <tfoot>
                <tr>
                    <th scope="row" colspan="3">Total Quantity</th>
                    <td id="totalQuantity">0</td>
                    <th scope="row" colspan="1">Total</th>
                    <td id="totalPrice">0</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div class="row w-max justify-content-center mb-4">
        <button type="submit" class="btn btn-red text-light" style="margin-right: 1rem;" onclick="validateForm(event)">Save</button>
        <a asp-action="Index" class="btn btn-back text-light">Close</a>
    </div>
</form>
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-danger" id="errorModalLabel">Validation Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="errorMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    function updateFooterTotal() {
        let totalQuantity = 0;
        let totalPrice = 0;
        
        document.querySelectorAll('#itemsTableBody tr').forEach(function(row) {
            let qty = row.querySelector('input[name*="QUANTITY"]').value;
            let price = row.querySelector('input[name*="PRICE"]').value;
            let total = row.querySelector('input[name*="TOTAL"]');
            
            if (qty && price) {
                total.value = (qty * price).toFixed(2);
                
                totalQuantity += parseInt(qty);
                totalPrice += parseFloat(qty * price);
            }
        });
        
        document.getElementById('totalQuantity').textContent = totalQuantity;
        document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
    }
    
    updateFooterTotal();
</script>
<script>
    function validateForm(event) {
        event.preventDefault();
        
        var form = $("#orderForm");
        var itemsTableBody = document.getElementById('itemsTableBody');
        var itemRows = itemsTableBody.querySelectorAll('tr');
        var validItems = false;
        
        itemRows.forEach(function(row) {
            var itemName = row.querySelector('input[name^="Form.Items"]').value;
            var quantity = row.querySelector('input[name$="QUANTITY"]').value;
            var price = row.querySelector('input[name$="PRICE"]').value;
            
            if (itemName && quantity && price) {
                validItems = true;
            }
        });

        if (!validItems) {
            $('#errorModal').modal('show');
            $('#errorMessage').text('Please add at least one item with valid information.');
        } else {
            if (form.valid()) {
                form.submit();
            }
        }
    }

    function updateTotal(inputElement) {
        updateFooterTotal()
        let row = inputElement.closest('tr');
        
        let quantity = parseFloat(row.querySelector('input[name$="QUANTITY"]').value) || 0;
        let price = parseFloat(row.querySelector('input[name$="PRICE"]').value) || 0;
        
        let total = quantity * price;

        let totalInput = row.querySelector('input[name$="TOTAL"]');
        totalInput.value = total.toFixed(2); 
    }
    function addItemRow() {
        let tableBody = document.getElementById('itemsTableBody');
        let rowCount = tableBody.rows.length + 1;
        let row = `
            <tr>
                <th scope="row">${rowCount}</th>
                <td>
                    <button onclick="saveItemRow(this)" type="button" class="btn btn-primary btn-sm">
                        <i class="fa-solid fa-floppy-disk"></i>
                    </button>
                    <button type="button" class="btn btn-danger btn-sm">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </td>
                <td><input type="text" class="form-control" name="Form.Items[${rowCount - 1}].ITEM_NAME" /></td>
                <td><input type="number" class="form-control" onchange="updateTotal(this)" name="Form.Items[${rowCount - 1}].QUANTITY" /></td>
                <td><input type="number" class="form-control" onchange="updateTotal(this)" name="Form.Items[${rowCount - 1}].PRICE" /></td>
                <td><input type="number" class="form-control"  name="Form.Items[${rowCount}].TOTAL" readonly /></td>
            </tr>
        `;
        tableBody.insertAdjacentHTML('beforeend', row);
    }

    function saveItemRow(button) {
        // Get the row of the button clicked
        let row = button.closest('tr');
        
        // Disable inputs (make them readonly)
        let inputs = row.querySelectorAll('input');
        inputs.forEach(input => {
            input.readOnly = true;
        });

        // Change the "Save" button to "Edit"
        let saveButton = row.querySelector('.btn-primary');
        saveButton.innerHTML = '<i class="fa-solid fa-pen"></i>';
        saveButton.setAttribute('onclick', 'editItemRow(this)');
    }

    function editItemRow(button) {
        // Get the row of the button clicked
        let row = button.closest('tr');
        
        // Enable inputs for editing
        let inputs = row.querySelectorAll('input');
        inputs.forEach(input => {
            input.readOnly = false;
        });

        // Change the "Edit" button back to "Save"
        let saveButton = row.querySelector('.btn-primary');
        saveButton.innerHTML = '<i class="fa-solid fa-floppy-disk"></i>';
        saveButton.setAttribute('onclick', 'saveItemRow(this)');
    }

    function deleteItemRow(button) {
        let row = button.closest('tr');
        row.remove();
    }

    function selectCustomer(customer) {
        document.getElementById('customerDropdown').innerText = customer;
        document.getElementById('selectedCustomer').value = customer;
    }
</script>
